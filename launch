#!/bin/sh
SHELL_PROGRAM=[=[
case $(uname -m) in x86_64) ARCH=x64;; i[36]86) ARCH=x86;; arm*) ARCH=arm;; esac
case $(uname) in Darwin) OS=osx;; *) OS=linux;; esac
APP_NAME="appexample"
ARG_LINE="$*"
STORAGE_PATH="data"
BINARY_DIR="$STORAGE_PATH/${OS}_${ARCH}"
BINARY_NAME="luajit"
URL="https://gitlab.com/CapsAdmin/goluwa-binaries-${OS}_${ARCH}/raw/master/$BINARY_NAME"

ZERO_ARG="$0"

if [ "$OS" = osx ] && [[ $ZERO_ARG =~ /Users/* ]]; then
    RAN_FROM_FILEBROWSER=1
fi

if [ "$OS" = linux ] && [ ! -t 1 ]; then
    RAN_FROM_FILEBROWSER=1
fi

Main() {
	DownloadLua "$URL" "$BINARY_DIR" "$BINARY_NAME"
	
	SCRIPT_PATH=$(realpath "$ZERO_ARG")
	binary_path="$BINARY_DIR/$BINARY_NAME $SCRIPT_PATH"

	export STORAGE_PATH
	export ARG_LINE
	export SCRIPT_PATH
	export RAN_FROM_FILEBROWSER

	if [ "$RAN_FROM_FILEBROWSER" = 1 ]; then
        clear
		$binary_path
		exit_code=$?

		if [ $exit_code -ne 0 ]; then
			AlertBox "$SCRIPT_PATH exited with code $exit_code" "error"
			exit 1
		fi
		if [ "$OS" = osx ]; then
			osascript -e 'tell application "Terminal" to quit' & exit
		fi
	else
		$binary_path
	fi
}

DownloadLua() {
	url="$1"
	directory="$2"
	filename="$3"

    if [ -f "$directory/lua_downloaded_and_validated" ]; then return; fi

	path="$directory/$filename"
	mkdir -p "$directory"

	DownloadFile "$url" "$path"

	echo "validating $path .. "
	chmod +x "$path" 
	$path -e "os.exit(0)"
	status=$?

	if [ $status -eq 0 ]; then
		echo "validation successful"
		touch "$directory/lua_downloaded_and_validated"
	else
		echo "exit code 'os.exit(0)' does not match $status"
		echo "removing $path in 5 seconds to try again"
		sleep 5s
		rm "$path"
		Main
	fi
}

DownloadFile () {
	url="$1"
	output_path="$2"

    if command -v wget >/dev/null 2>&1; then
        wget -O "$output_path" "$url"
    elif command -v curl >/dev/null 2>&1; then
        curl -L --url "$url" --output "$output_path"
    else
        AlertBox "unable to find wget or curl" "error"
        exit 1
    fi

    if [ $? -ne 0 ]; then
        AlertBox "wget or curl failed with exit code $?" "error"
        rm "$output_path"
        exit 1
    fi
}

AlertBox() {
    msg=$1
    title=$2
    if [ "$OS" = osx ]; then
        osascript -e "tell app \"System Events\" to display dialog \"$msg\" with title \"$title\""
    else
        echo "$msg" | xmessage -nearmouse -title "$title" -file -
    fi
}

realpath() {
    OURPWD=$PWD
    cd "$(dirname "$1")"
    LINK=$(readlink "$(basename "$1")")
    while [ "$LINK" ]; do
        cd "$(dirname "$LINK")"
        LINK=$(readlink "$(basename "$1")")
    done
    REALPATH="$PWD/$(basename "$1")"
    cd "$OURPWD"
    echo "$REALPATH"
}

Main

exit 0
]=]

function AlertBox(msg, title)
	title = title or ""
	if io.popen("command -v xmessage"):read("*all") ~= "" then
		local f = io.popen("xmessage -nearmouse -title \"" .. title .. "\" -file -", "w")
		f:write(msg)
		f:close()
	else
		msg = msg:gsub("\n", "\\n")
		os.execute([[osascript -e 'tell app "System Events" to display dialog "]]..msg..[[" with title "]]..title..[["']])
	end
end

function main(storage_path, script_path, arg_line)
	arg_line = arg_line or ""

    local msg = "storage path: " .. storage_path .. "\n" ..
    "script path: " ..script_path .. "\n" ..
    "arg line:" .. arg_line

	for i = 1, 10 do
		print("some console text " .. i)
	end

	if os.getenv("RAN_FROM_FILEBROWSER") == "1" then
		AlertBox(msg, "hello from lua!")
	else
		print(msg)
	end
end

main(
	os.getenv("STORAGE_PATH"):gsub("\\", "/") .. "/",
	os.getenv("SCRIPT_PATH"):gsub("\\", "/"),
	os.getenv("ARG_LINE") or ""
)